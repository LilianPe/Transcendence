services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - ./certs/fullchain.crt:/tmp/ssl/transcendence.crt:ro
      - ./certs/transcendence.key:/tmp/ssl/transcendence.key:ro
      - ./certs/ca.crt:/tmp/ssl/ca.crt:ro
    # ports:
    #   - "3000:3000"
    networks:
      - webnet
      - elknet
    working_dir: /app
    command: sh -c "npm install && npm run tsc && npm run dev"
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - METAMASK_KEY=${METAMASK_KEY}
      - NODE_EXTRA_CA_CERTS=/tmp/ssl/ca.crt
    ports:
      - "4500:4500"
    volumes:
      - ./backend:/app
      - shared-data:/vault/token/
      - ./certs/fullchain.crt:/tmp/ssl/transcendence.crt:ro
      - ./certs/transcendence.key:/tmp/ssl/transcendence.key:ro
      - ./certs/ca.crt:/tmp/ssl/ca.crt:ro
    working_dir: /app
    networks:
      - webnet
      - elknet
    command: sh -c "npm install && npm run build && npm run dev"

  hashicorp_vault:
    build:
      context: ./hashicorp_vault
      dockerfile: Dockerfile
    ports:
      - "8300:8300"
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_ADDR: https://localhost:8300
    volumes:
      - shared-data:/vault/token/
      - ./certs/fullchain.crt:/tmp/ssl/transcendence.crt:ro
      - ./certs/transcendence.key:/tmp/ssl/transcendence.key:ro
      - ./certs/ca.crt:/tmp/ssl/ca.crt:ro
    networks:
      - webnet
      - elknet
      
  waf:
    build:
      context: ./waf
      dockerfile: Dockerfile
    ports:
      - "3100:6000"
    networks:
      - webnet
    volumes:
      - ./certs/fullchain.crt:/tmp/ssl/transcendence.crt:ro
      - ./certs/transcendence.key:/tmp/ssl/transcendence.key:ro
      - ./certs/ca.crt:/tmp/ssl/ca.crt:ro
    depends_on:
      - frontend
      - backend
  
  # ─────── ELASTICSEARCH ───────
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.1
    container_name: elasticsearch
    env_file: .env
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - esdata:/usr/share/elasticsearch/data
      - ./elk/elasticsearch/backup:/usr/share/elasticsearch/backup:rw
      - ./elk/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
      - ./certs:/usr/share/elasticsearch/config/certs:ro
    networks:
      - elknet


  # ─────── KIBANA ───────
  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.1
    container_name: kibana
    env_file: .env
    ports:
      - "9400:5601"
    environment:
      - ELASTICSEARCH_HOSTS=https://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - SERVER_SSL_ENABLED=true
      - SERVER_SSL_CERTIFICATE=/usr/share/kibana/config/certs/fullchain.crt
      - SERVER_SSL_KEY=/usr/share/kibana/config/certs/transcendence.key
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=/usr/share/kibana/config/certs/ca.crt
      - ELASTICSEARCH_SSL_VERIFICATIONMODE=certificate
    volumes:
      - ./elk/filebeat/config/ilm_policy.json:/usr/share/kibana/config/ilm_policy.json:ro
      - ./certs:/usr/share/kibana/config/certs:ro
      - ./elk/kibana/config/setup_kibana.sh:/usr/local/bin/setup_kibana.sh:ro
      - ./elk/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    command: /usr/local/bin/setup_kibana.sh
    depends_on:
      - elasticsearch
    networks:
      - elknet


  # ─────── LOGSTASH ───────
  logstash:
    image: docker.elastic.co/logstash/logstash:8.12.1
    container_name: logstash
    env_file: .env
    ports:
      - "9500:5000"
    volumes:
      - ./elk/logstash/pipeline/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./elk/logstash/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - ./elk/logstash/config/ilm_policy.json:/usr/share/logstash/config/ilm_policy.json:ro
      - ./certs:/usr/share/logstash/config/certs:ro
    depends_on:
      - elasticsearch
    networks:
      - elknet

  # ─────── FILEBEAT ───────
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.12.1
    container_name: filebeat
    env_file: .env
    depends_on:
      - elasticsearch
    networks:
      - elknet
    volumes:
      - ./elk/filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./elk/filebeat/config/ilm_policy.json:/usr/share/filebeat/config/ilm_policy.json:ro
      - ./logs:/logs:ro
      - ./certs:/usr/share/filebeat/config/certs:ro
    command: >
      sh -c '
        # 1) Wait for ES (with basic auth)
        until curl -s -u "${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}" \
            --cacert /usr/share/filebeat/config/certs/ca.crt \
            https://elasticsearch:9200; do
          echo "Waiting for Elasticsearch…"
          sleep 2
        done

        # 2) Install ILM policy, index template & alias
        filebeat setup --index-management \
          -E output.elasticsearch.hosts=["https://elasticsearch:9200"] \
          -E output.elasticsearch.username=${ELASTIC_USERNAME} \
          -E output.elasticsearch.password=${ELASTIC_PASSWORD} \
          -E output.elasticsearch.ssl.certificate_authorities=["/usr/share/filebeat/config/certs/ca.crt"]

        # 3) Start shipping
        exec filebeat -e
      '
      
volumes:
  esdata:
  shared-data:

networks:
  webnet:
    driver: bridge
  elknet:
    driver: bridge
