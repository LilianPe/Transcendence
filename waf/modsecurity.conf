# -- Rule engine initialization ----------------------------------------------

# Enable ModSecurity, attaching it to every transaction. Use detection
# only to start with, because that minimises the chances of post-installation
# disruption.
#
SecRuleEngine On


# -- Request body handling ---------------------------------------------------

# Allow ModSecurity to access request bodies. If you don't, ModSecurity
# won't be able to see any POST parameters, which opens a large security
# hole for attackers to exploit.
#
SecRequestBodyAccess On

SecRequestBodyLimit 13107200

#Protection XSS
SecRule ARGS|ARGS_NAMES|REQUEST_HEADERS|XML:/* "@rx <script|javascript:" "id:'2000001',phase:2,deny,status:403,msg:'XSS Attempt Detected'"

#Protection SQL
SecRule ARGS|ARGS_NAMES|REQUEST_HEADERS|XML:/* "@rx select.*from.*where|insert.*into|drop.*table|update.*set|delete.*from" "id:'2000002',phase:2,deny,status:403,msg:'SQL Injection Attempt Detected'"

#Protection brute force
SecRule IP:BRUTE_FORCE_LIMIT "@gt 5" "id:'2000003',phase:1,deny,status:403,msg:'Brute Force Attack Detected'"
SecRule IP:BRUTE_FORCE_LIMIT "@gt 3" "id:'2000004',phase:1,deny,status:403,msg:'Brute Force Attack Detected'"